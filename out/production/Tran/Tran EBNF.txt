TranProgram ::= {Class | Interface}

// Class Definition

Class ::= "class" Name ["implements" Name] ClassBody

ClassBody ::= {{MethodHeader StatementBlock} | {MemberDeclaration}}

MethodHeader ::= ["private"] ["shared"] MethodName "(" [{DeclarationStatement}] ")" [":" {DeclarationStatement}]

MethodName ::= Name 
		
DeclarationStatement ::= Datatype (VariableName | {VariableName, })

VariableName ::= Name

DataType ::= <number> | <boolean> | <string> | <character>

MemberDeclaration ::= DeclarationStatement
			["accessor[ ]:" StatementBlock]
			["mutator[ ]:" StatementBlock]

// what counts as a valid Name Definition

Name ::= Letter {Letter}

Letter ::= "a" | "b" | "c" | ... | "z" | "A" | "B" | "C" | ... | "Z" 

// Interface Definition

Interface ::= "interface" Name
		{MethodHeader}
	
// Statement Definition

StatementBlock ::= {Statement} // All on same indentation level

Statement ::= IfStatement | LoopStatement | AssignmentStatement | VoidMethodCallStatement | DeclarationStatement

IfStatement ::= "if" BooleanExpression StatementBlock

LoopStatement ::= "loop" BooleanExpression StatementBlock

AssignmentStatement ::= VariableName "=" Expression

VoidMethodCallStatement ::= MethodName "(" [Expression] ")"

// Expression Definition

Expression ::= BooleanExpression | NumberExpression | StringExpression

BooleanExpression ::= (VariableOrNumber NumberRelat VariableOrNumber)
			| <boolean>
			| (BooleanExpression ("&&" | "||") BooleanExpression) 
			| "!" BooleanExpression

NumberRelat ::= "==" | "!=" | "<" | "<=" | ">" | ">="

VariableOrNumber ::= Name | <number> 

NumberExpression ::= NumberExpression NumberOp NumberExpression | VariableOrNumber

NumberOp ::= "+" | "-" | "*" | "/" | "%"

StringExpression ::= VariableOrString [+ (StringExpression | <character>)]

VariableOrString ::= Name | <string>

// Literals of each data type

<number> ::= [-] Digit {Digit} [.Digit {Digit}]

Digit ::= "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9"

<character> ::= Letter | Digit | "," | "." | ... // All Unicode

<string> ::= {character}

<boolean> ::= "true" | "false"

